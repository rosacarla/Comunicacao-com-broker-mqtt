# -*- coding: utf-8 -*-
"""Comunicacao-HiveMQ.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aRnbSdAiFvZU_9sfuS_uZjjpxnM1KV5R

># TESTE DE CONEXÃO DE UM DISPOSITIVO IOT COM BROKER MQTT
> CURSO: TECNOLOGIA EM INTELIGÊNCIA ARTIFICIAL APLICADA  
> DISCIPLINA: INTERNET DAS COISAS EM UM MUNDO CONECTADO  
> AUTORA: CARLA EDILA SILVEIRA  
> OBJETIVO: testar dispositivo simulado em Python para monitorar temperatura e umidade e controlar um aquecedor, com uso de navegador como ferramenta de visualização dos dados  
> DATA: 15/09/2023

> <img src='https://i.postimg.cc/Zn1FXjWR/esquem-mqtt.png' width=960 height=480>
"""

# Commented out IPython magic to ensure Python compatibility.
# Instala biblioteca paho-mqtt
# Executar instalacao somente 1 vez

# %pip install paho-mqtt

# Importa bibliotecas

import paho.mqtt.client as mqtt # paho eh biblioteca principal para trabalhar com mqtt
import time # biblioteca de temporalizacao
from hal import temperatura, umidade, aquecedor

# Configuracoes de credenciais para conexao com broker MQTT

user = '' # não preencher user e password porque HiveMQ nao precisa
password = '' # deve preencher para outros tipos de broker
client_id = 'abcdefghijk12345678' # para hive pode ser string sem espaços como identificador do dispositivo
server = 'mqtt-dashboard.com' # usar servidor que aparece na tela do HiveMQ
port = 1883 # usar porta padrao do mqtt (1883), dispensar porta que há na interface do navegador

# Faz conexao com HiveMQ

client = mqtt.Client(client_id) # objeto recebe a id do cliente
client.username_pw_set(user, password) # objeto recebe usuario e senha
client.connect(server, port) # objeto recebe servidor e porta

# Faz publish em looping para passar 2 informações distintas
# Argumentos sao topico e mensagem

while True:
    client.publish('pucpr/iotmc/carla/temperatura', temperatura()) # acessa hardware de sensor de temperatura
    # evitar envio de informacoes compostas na mensagem, a menos que tenha necessidade
    client.publish('pucpr/iotmc/carla/umidade', umidade()) # acessa hardware de sensor de umidade
    time.sleep(5) # pausa para enviar a mensagem
    # apos conectar o HIveMQ, criar topico 'pucpr/iotmc/carla/#' para monitoramento de mensagens via codigo

"""> OBSERVAÇÃO: Após conectar ao HiveMQ, criar tópico 'pucpr/iotmc/carla/#' no navegador para monitoramento de mensagens enviadas pelo código."""

# Desconecta do broker

# client.disconnect(0) #desativada a linha de comando para rodar laço while

"""> VISUALIZAÇÃO DE MENSAGENS RECEBIDAS NO DASHBOARD DO HIVEMQ  
> - 1a. execução de tópico sobre temperatura  

> <img src='https://i.postimg.cc/VkdBzJyM/tela-topicos-hivemq.png'>  

> - 2a. execução de 2 tópicos (temperatura e umidade)  

> <img src='https://i.postimg.cc/3JL7yC9k/tela-topicos2-hive.png'>  

> - 3a. execução de 2 tópicos com valores aleatórios (temperatura e umidade)  

> <img src='https://i.postimg.cc/Nj5DpJZ2/tela-topicos3-hive.png'>


"""